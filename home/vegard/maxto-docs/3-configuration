import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, t as text, a as space, g as claim_element, h as children, j as claim_text, b as detach_dev, f as claim_space, l as add_location, x as attr_dev, m as insert_dev, n as append_dev, w as noop } from './client.1d2e5f1c.js';

/* src/routes/old-installing/2-msi.html generated by Svelte v3.23.0 */

const file = "src/routes/old-installing/2-msi.html";

function create_fragment(ctx) {
	let html;
	let head;
	let title;
	let t0;
	let t1;
	let body;
	let p0;
	let t2;
	let t3;
	let section0;
	let p1;
	let t4;
	let a;
	let t5;
	let t6;
	let t7;
	let p2;
	let t8;
	let t9;
	let p3;
	let t10;
	let t11;
	let h2;
	let t12;
	let t13;
	let section1;
	let dl;
	let dt0;
	let t14;
	let dd0;
	let p4;
	let t15;
	let t16;
	let p5;
	let t17;
	let code0;
	let t18;
	let t19;
	let t20;
	let p6;
	let t21;
	let code1;
	let t22;
	let t23;
	let t24;
	let dt1;
	let t25;
	let dd1;
	let p7;
	let t26;
	let t27;
	let p8;
	let t28;

	const block = {
		c: function create() {
			html = element("html");
			head = element("head");
			title = element("title");
			t0 = text("MSI installer");
			t1 = space();
			body = element("body");
			p0 = element("p");
			t2 = text("Use the MSI installer to install MaxTo for a wide set of users in your enterprise.");
			t3 = space();
			section0 = element("section");
			p1 = element("p");
			t4 = text("The MSI installer package is not intended for ordinary installations of MaxTo. If you don't know what Group\r\n            Policy is, use ");
			a = element("a");
			t5 = text("the normal installer instead");
			t6 = text(".");
			t7 = space();
			p2 = element("p");
			t8 = text("When you install the MSI package, all the users on the machine will get their own copy of MaxTo installed the\r\n        next time they log in.");
			t9 = space();
			p3 = element("p");
			t10 = text("It is important to note that when you run the MSI package, it will appear to do nothing (besides asking you for administrative permissions).");
			t11 = space();
			h2 = element("h2");
			t12 = text("Known pitfalls when deploying the MSI package");
			t13 = space();
			section1 = element("section");
			dl = element("dl");
			dt0 = element("dt");
			t14 = text("Nothing happens when users log in");
			dd0 = element("dd");
			p4 = element("p");
			t15 = text("The MSI package will not re-install MaxTo on login for users who have previously uninstalled MaxTo.");
			t16 = space();
			p5 = element("p");
			t17 = text("It does this by checking for the existence of the ");
			code0 = element("code");
			t18 = text("%LocalAppData%\\MaxTo");
			t19 = text(" folder. If this folder exists, MaxTo will not be installed on login.");
			t20 = space();
			p6 = element("p");
			t21 = text("To get around this issue, delete the ");
			code1 = element("code");
			t22 = text("%LocalAppData%\\MaxTo");
			t23 = text(" folder for the affected user profiles.");
			t24 = space();
			dt1 = element("dt");
			t25 = text("User installation of .NET Framework fails");
			dd1 = element("dd");
			p7 = element("p");
			t26 = text("MaxTo requires .NET Framework version 4.7.2. The normal installer (which is what the MSI runs on login) will attempt to install this dependency if it is not already installed. This can fail in some cases.");
			t27 = space();
			p8 = element("p");
			t28 = text("We strongly recommend deploying the .NET Framework version 4.7.2 in addition to MaxTo.");
			this.h();
		},
		l: function claim(nodes) {
			html = claim_element(nodes, "HTML", {});
			var html_nodes = children(html);
			head = claim_element(html_nodes, "HEAD", {});
			var head_nodes = children(head);
			title = claim_element(head_nodes, "TITLE", {});
			var title_nodes = children(title);
			t0 = claim_text(title_nodes, "MSI installer");
			title_nodes.forEach(detach_dev);
			head_nodes.forEach(detach_dev);
			t1 = claim_space(html_nodes);
			body = claim_element(html_nodes, "BODY", {});
			var body_nodes = children(body);
			p0 = claim_element(body_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Use the MSI installer to install MaxTo for a wide set of users in your enterprise.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(body_nodes);
			section0 = claim_element(body_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			p1 = claim_element(section0_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "The MSI installer package is not intended for ordinary installations of MaxTo. If you don't know what Group\r\n            Policy is, use ");
			a = claim_element(p1_nodes, "A", { href: true });
			var a_nodes = children(a);
			t5 = claim_text(a_nodes, "the normal installer instead");
			a_nodes.forEach(detach_dev);
			t6 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t7 = claim_space(body_nodes);
			p2 = claim_element(body_nodes, "P", {});
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, "When you install the MSI package, all the users on the machine will get their own copy of MaxTo installed the\r\n        next time they log in.");
			p2_nodes.forEach(detach_dev);
			t9 = claim_space(body_nodes);
			p3 = claim_element(body_nodes, "P", {});
			var p3_nodes = children(p3);
			t10 = claim_text(p3_nodes, "It is important to note that when you run the MSI package, it will appear to do nothing (besides asking you for administrative permissions).");
			p3_nodes.forEach(detach_dev);
			t11 = claim_space(body_nodes);
			h2 = claim_element(body_nodes, "H2", {});
			var h2_nodes = children(h2);
			t12 = claim_text(h2_nodes, "Known pitfalls when deploying the MSI package");
			h2_nodes.forEach(detach_dev);
			t13 = claim_space(body_nodes);
			section1 = claim_element(body_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			dl = claim_element(section1_nodes, "DL", {});
			var dl_nodes = children(dl);
			dt0 = claim_element(dl_nodes, "DT", {});
			var dt0_nodes = children(dt0);
			t14 = claim_text(dt0_nodes, "Nothing happens when users log in");
			dt0_nodes.forEach(detach_dev);
			dd0 = claim_element(dl_nodes, "DD", {});
			var dd0_nodes = children(dd0);
			p4 = claim_element(dd0_nodes, "P", {});
			var p4_nodes = children(p4);
			t15 = claim_text(p4_nodes, "The MSI package will not re-install MaxTo on login for users who have previously uninstalled MaxTo.");
			p4_nodes.forEach(detach_dev);
			t16 = claim_space(dd0_nodes);
			p5 = claim_element(dd0_nodes, "P", {});
			var p5_nodes = children(p5);
			t17 = claim_text(p5_nodes, "It does this by checking for the existence of the ");
			code0 = claim_element(p5_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t18 = claim_text(code0_nodes, "%LocalAppData%\\MaxTo");
			code0_nodes.forEach(detach_dev);
			t19 = claim_text(p5_nodes, " folder. If this folder exists, MaxTo will not be installed on login.");
			p5_nodes.forEach(detach_dev);
			t20 = claim_space(dd0_nodes);
			p6 = claim_element(dd0_nodes, "P", {});
			var p6_nodes = children(p6);
			t21 = claim_text(p6_nodes, "To get around this issue, delete the ");
			code1 = claim_element(p6_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t22 = claim_text(code1_nodes, "%LocalAppData%\\MaxTo");
			code1_nodes.forEach(detach_dev);
			t23 = claim_text(p6_nodes, " folder for the affected user profiles.");
			p6_nodes.forEach(detach_dev);
			t24 = claim_space(dd0_nodes);
			dd0_nodes.forEach(detach_dev);
			dt1 = claim_element(dl_nodes, "DT", {});
			var dt1_nodes = children(dt1);
			t25 = claim_text(dt1_nodes, "User installation of .NET Framework fails");
			dt1_nodes.forEach(detach_dev);
			dd1 = claim_element(dl_nodes, "DD", {});
			var dd1_nodes = children(dd1);
			p7 = claim_element(dd1_nodes, "P", {});
			var p7_nodes = children(p7);
			t26 = claim_text(p7_nodes, "MaxTo requires .NET Framework version 4.7.2. The normal installer (which is what the MSI runs on login) will attempt to install this dependency if it is not already installed. This can fail in some cases.");
			p7_nodes.forEach(detach_dev);
			t27 = claim_space(dd1_nodes);
			p8 = claim_element(dd1_nodes, "P", {});
			var p8_nodes = children(p8);
			t28 = claim_text(p8_nodes, "We strongly recommend deploying the .NET Framework version 4.7.2 in addition to MaxTo.");
			p8_nodes.forEach(detach_dev);
			dd1_nodes.forEach(detach_dev);
			dl_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			body_nodes.forEach(detach_dev);
			html_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title, file, 3, 4, 22);
			add_location(head, file, 2, 0, 10);
			attr_dev(p0, "class", "lead");
			add_location(p0, file, 7, 4, 75);
			attr_dev(a, "href", "1-setup.html");
			add_location(a, file, 11, 27, 361);
			add_location(p1, file, 10, 8, 222);
			attr_dev(section0, "class", "important");
			add_location(section0, file, 9, 4, 185);
			add_location(p2, file, 14, 4, 445);
			add_location(p3, file, 17, 4, 601);
			add_location(h2, file, 19, 4, 756);
			add_location(dt0, file, 23, 12, 868);
			add_location(p4, file, 25, 16, 946);
			add_location(code0, file, 30, 70, 1187);
			add_location(p5, file, 29, 16, 1112);
			add_location(code1, file, 34, 57, 1393);
			add_location(p6, file, 33, 16, 1331);
			add_location(dd0, file, 24, 12, 924);
			add_location(dt1, file, 38, 12, 1522);
			add_location(p7, file, 40, 16, 1608);
			add_location(p8, file, 44, 16, 1879);
			add_location(dd1, file, 39, 12, 1586);
			add_location(dl, file, 22, 8, 850);
			attr_dev(section1, "class", "note");
			add_location(section1, file, 21, 4, 818);
			add_location(body, file, 6, 0, 63);
			add_location(html, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, html, anchor);
			append_dev(html, head);
			append_dev(head, title);
			append_dev(title, t0);
			append_dev(html, t1);
			append_dev(html, body);
			append_dev(body, p0);
			append_dev(p0, t2);
			append_dev(body, t3);
			append_dev(body, section0);
			append_dev(section0, p1);
			append_dev(p1, t4);
			append_dev(p1, a);
			append_dev(a, t5);
			append_dev(p1, t6);
			append_dev(body, t7);
			append_dev(body, p2);
			append_dev(p2, t8);
			append_dev(body, t9);
			append_dev(body, p3);
			append_dev(p3, t10);
			append_dev(body, t11);
			append_dev(body, h2);
			append_dev(h2, t12);
			append_dev(body, t13);
			append_dev(body, section1);
			append_dev(section1, dl);
			append_dev(dl, dt0);
			append_dev(dt0, t14);
			append_dev(dl, dd0);
			append_dev(dd0, p4);
			append_dev(p4, t15);
			append_dev(dd0, t16);
			append_dev(dd0, p5);
			append_dev(p5, t17);
			append_dev(p5, code0);
			append_dev(code0, t18);
			append_dev(p5, t19);
			append_dev(dd0, t20);
			append_dev(dd0, p6);
			append_dev(p6, t21);
			append_dev(p6, code1);
			append_dev(code1, t22);
			append_dev(p6, t23);
			append_dev(dd0, t24);
			append_dev(dl, dt1);
			append_dev(dt1, t25);
			append_dev(dl, dd1);
			append_dev(dd1, p7);
			append_dev(p7, t26);
			append_dev(dd1, t27);
			append_dev(dd1, p8);
			append_dev(p8, t28);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(html);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<_2_msi> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("_2_msi", $$slots, []);
	return [];
}

class _2_msi extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "_2_msi",
			options,
			id: create_fragment.name
		});
	}
}

export default _2_msi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi1tc2kuZTg3ODI4NDkuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
